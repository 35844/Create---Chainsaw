<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="https://fonts.googleapis.com/css?family=Roboto:500" rel="stylesheet">
    <title>Create - Chainsaw</title>
    <style>
        
* {
    margin: 0;
    padding: 0;
}
        
body {
    font-family: 'Roboto', sans-serif;
    background-color: rgb(245, 245, 245);
}
        
table {
    margin: 50px auto;
    width: 90%;
    height: 90vw;
    max-height: 600px;
    max-width: 600px;
    border-collapse: collapse;
    border: 10px solid rgb(29, 29, 29);
}
        
td {
    width: 29vw;
     height: 29vw; 
    /* max-width: 200px; */
    /* max-height: 200px; */
    border: 10px solid rgb(29, 29, 29);
    font-size: 80px;
    text-align: center;
}
        
#message-wrapper {
    top: 0;
    left: 0;
    position: fixed;
    width: 100%;
    height: 100vh;
    background-color: transparent;
    transition: background-color 1s ease-in-out;
    z-index: -1;
}
        
#message-wrapper > #message {
    position: absolute;
    width: 100%;
    height: 50px;
    font-size: 30px;
    top: calc(50vh - 25px);
    text-align: center;
    color: transparent;
    transition: color 1s;
}
        
#message-wrapper.visible {
    background-color: rgba(255, 255, 255, 0.9);
}
        
#message-wrapper.visible > #message {
    color: black;
}
        
header {
    width: 100%;
    height: 100px;
}
        
header > .title {
    margin-top: 50px;
    font-size: 40px;
    text-align: center;
}
        
header > #score {
    letter-spacing: 10px;
    margin-top: 20px;
    font-size: 30px;
    text-align: center;
}
        
    </style>
</head>
<body>
    <header>
        <div class="title">
            Tic Tac Toe
        </div>
        <div id="score">
            0 - 0
        </div>
    </header>
    <div id="message-wrapper">
        <div id="message"></div>
    </div>
    <table>
        <tbody>
            <tr>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>
    <script>
"use strict";
const boxes = [];
const messageWrapper = document.getElementById("message-wrapper");
const message = document.getElementById("message");
const scoreDisplay = document.getElementById("score");
        
let gamePlaying = true;
let playerXTurn = true;
let xScore = 0;
let oScore = 0;
        
for (const tr of document.getElementsByTagName('tr')) {
    boxes.push(tr.getElementsByTagName('td'));
}
        
function fadeInMessage(msg) {
    if (!msg) {
        msg = message.innerHTML;
    } else {
        message.innerHTML = msg;
    }
    messageWrapper.style.zIndex = 5;
    messageWrapper.classList.add("visible");
}
        
function fadeOutMessage() {
    messageWrapper.classList.remove("visible");
    setTimeout(() => {
        messageWrapper.style.zIndex = -1;
    }, 500);
}
        
function displayWinnerBoxes(winnerBoxes) {
    for (const box of winnerBoxes) {
        box.style.color = 'rgb(255,73,73)';
    }
}
        
function displayWinnerMessage(char) {
    if (!char) {
        fadeInMessage(`Tie.`);
        return;
    }
    fadeInMessage(`Congratulations to "${char}" player! ðŸŽ‰`);
}
        
function checkVertical(char) {
    if (!char) return false;
    for (let i = 0; i < 3; i++) {
        let win = true;
        const winnerBoxes = [];
        for (const boxRow of boxes) {
            winnerBoxes.push(boxRow[i]);
            win = win && boxRow[i].innerHTML == char;
        }
        if (win) return winnerBoxes;
    }
    return false;
}
        
function checkHorizontal(char) {
    if (!char) return false;
    for (const boxRow of boxes) {
        let win = true;
        const winnerBoxes = [];
        for (let i = 0; i < 3; i++) {
            winnerBoxes.push(boxRow[i]);
            win = win && boxRow[i].innerHTML == char;
        }
        if (win) return winnerBoxes;
    }
    return false;
}
        
function checkWin(char) {
    return checkVertical(char) || checkHorizontal(char) || checkDiagonal(char);
}
        
function checkDiagonal(char) {
    const checkBoxes = (boxes) => {
        let winnerBoxes = [];
        for (const box of boxes) {
            if (box.innerHTML == char) {
                winnerBoxes.push(box);
            }
        }
        return winnerBoxes.length == 3 ? winnerBoxes : false;
    }
    return checkBoxes([boxes[0][0], boxes[1][1], boxes[2][2]]) ||
        checkBoxes([boxes[2][2], boxes[1][1], boxes[0][0]]);
}
        
function checkTie() {
    for (const box of document.getElementsByTagName('td')) {
        if (box.innerHTML == "") return false;
    }
    return true;
}
        
function getClickedFunction(box) {
    return () => {
        if (!gamePlaying) return;
        if (box.innerHTML !== "") return;
        const char = playerXTurn ? 'X' : 'O';
        playerXTurn = !playerXTurn;
        box.innerHTML = char;
        const winnerBoxes = checkWin(char);
        if (winnerBoxes) {
            gamePlaying = false;
            displayWinnerBoxes(winnerBoxes);
            addScore(char);
            setTimeout(() => {
                displayWinnerMessage(char);
                restartGame();
            }, 500);
        } else if (checkTie()) {
            gamePlaying = false;
            addScore();
            setTimeout(() => {
                displayWinnerMessage();
                restartGame();
            }, 500);
        }
    }
}
        
function restartGame() {
    setTimeout(() => {
        playerXTurn = true;
        gamePlaying = true;
        for (const box of document.getElementsByTagName('td')) {
            box.innerHTML = "";
            box.style.color = "black";
        }
        fadeOutMessage();
    }, 1500);
}
        
function setScore(xScoreTo, oScoreTo) {
    xScore = xScoreTo;
    oScore = oScoreTo;
    scoreDisplay.innerHTML = `${xScore} - ${oScore}`;
}
        
function addScore(char) {
    if (char == "X") {
        return setScore(xScore + 1, oScore);
    } else if (char == "O") {
        return setScore(xScore, oScore + 1);
    }
    return setScore(xScore + 1, oScore + 1);
}
        
for (const box of document.getElementsByTagName('td')) {
    box.addEventListener("click", (() => getClickedFunction(box))());
}
    </script>
</body>
</html>
